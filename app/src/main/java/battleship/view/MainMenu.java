package battleship.view;

import battleship.controller.MainController;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ResourceBundle;

@SuppressWarnings("SameParameterValue")
public class MainMenu extends JFrame {
    private JLabel gameName;
    private JButton hostButton;
    private JButton joinButton;
    private JButton exitButton;
    private JPanel mainPanel;
    private JButton playButton;

    private final ResourceBundle resourceBundle;

    private WaitingHostDialog waitForHostDialog;

    private final MainController mainController;

    public MainController getMainController() {
        return mainController;
    }

    public MainMenu(MainController mainController) throws HeadlessException {
        this.mainController = mainController;

        this.resourceBundle = ResourceBundle.getBundle("ui_strings");
        this.setTitle(resourceBundle.getString("gameName"));

        this.setContentPane(this.mainPanel);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.pack();
        this.setSize(600, 400);
        this.setVisible(true);
        hostButton.addActionListener(e -> MainMenu.this.mainController.hostGame());
        joinButton.addActionListener(e -> MainMenu.this.mainController.joinGame());
    }

    public void displayLoading() {
        this.waitForHostDialog = new WaitingHostDialog(this, this.resourceBundle);
        this.waitForHostDialog.setVisible(true);
    }

    public void closeLoading() {
        this.waitForHostDialog.dispose();
    }

    public void setButtonsToStart() {
        this.hostButton.setEnabled(false);
        this.joinButton.setEnabled(false);
        this.playButton.setEnabled(true);
    }

    public InetAddress requestJoiningAddress() {
        try {
            return InetAddress.getByName(
                    JOptionPane.showInputDialog(this,
                            this.resourceBundle.getString("requestAddress"),
                            this.resourceBundle.getString("requestAddressDialogTitle"),
                            JOptionPane.QUESTION_MESSAGE));
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        return null;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        gameName = new JLabel();
        this.$$$loadLabelText$$$(gameName, this.$$$getMessageFromBundle$$$("ui_strings", "gameName"));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mainPanel.add(gameName, gbc);
        hostButton = new JButton();
        this.$$$loadButtonText$$$(hostButton, this.$$$getMessageFromBundle$$$("ui_strings", "host"));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 20;
        gbc.insets = new Insets(0, 100, 0, 100);
        mainPanel.add(hostButton, gbc);
        joinButton = new JButton();
        this.$$$loadButtonText$$$(joinButton, this.$$$getMessageFromBundle$$$("ui_strings", "join"));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 20;
        gbc.insets = new Insets(0, 100, 0, 100);
        mainPanel.add(joinButton, gbc);
        exitButton = new JButton();
        this.$$$loadButtonText$$$(exitButton, this.$$$getMessageFromBundle$$$("ui_strings", "exit"));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 20;
        gbc.insets = new Insets(0, 100, 0, 100);
        mainPanel.add(exitButton, gbc);
        playButton = new JButton();
        playButton.setEnabled(false);
        this.$$$loadButtonText$$$(playButton, this.$$$getMessageFromBundle$$$("ui_strings", "play"));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 20;
        gbc.insets = new Insets(0, 100, 0, 100);
        mainPanel.add(playButton, gbc);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
